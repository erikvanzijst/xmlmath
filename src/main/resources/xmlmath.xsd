<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
	targetNamespace="http://xmlmath.org/1.0"
	xmlns="http://xmlmath.org/1.0"
	xmlns:tns="http://xmlmath.org/1.0"
	elementFormDefault="qualified"
	attributeFormDefault="unqualified">

	<xs:annotation>
		<xs:documentation xml:lang="en">This schema describes elements that can be chained together to form relatively complex mathematical expressions.</xs:documentation>
	</xs:annotation>

	<xs:group name="definitions">
		<xs:annotation>
			<xs:documentation xml:lang="en">This element group contains declarative elements "include", "stanza" and "declare". It is used by all elements that allow declarative definitions.</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:choice minOccurs="0" maxOccurs="unbounded">
				<xs:element name="include" type="include-type"/>
				<xs:element name="stanza" type="stanza-type"/>
				<xs:element name="declare" type="declare-type"/>
			</xs:choice>
		</xs:sequence>
	</xs:group>
	
	<xs:element name="expression" type="expression-type" final="#all"/>
	<xs:complexType name="expression-type" final="#all">
		<xs:annotation>
			<xs:documentation xml:lang="en">This is the root tag for any expression. It contains a value tag and optionally an assignment element for declarations and stanzas.</xs:documentation>
		</xs:annotation>
		<xs:sequence >
			<xs:element ref="inputValue" minOccurs="0" maxOccurs="unbounded"/>
			<xs:group ref="definitions"/>
			<xs:element ref="value"/>
		</xs:sequence>
	</xs:complexType>

	<xs:element name="inputValue" type="inputValue-type" abstract="true"/>
	<xs:complexType name="inputValue-type" abstract="true">
		<xs:annotation>
			<xs:documentation xml:lang="en">Base type for all input tags. These are used as child elements in the expression root-tag. Their value can be manipulated by the user application between consecutive evaluations. Input tags have a name under which they are accessible as declared values through link-tags.</xs:documentation>
		</xs:annotation>
		<xs:sequence/>
		<xs:attribute name="description" type="xs:string" use="optional"/>
		<xs:attribute name="name" type="declaredName" use="required"/>
	</xs:complexType>
	
	<xs:element name="inputString" type="inputString-type" substitutionGroup="inputValue"/>
	<xs:complexType name="inputString-type">
		<xs:complexContent>
			<xs:extension base="inputValue-type">
				<xs:attribute name="value" type="xs:string" use="optional">
					<xs:annotation>
						<xs:documentation xml:lang="en">Provides a default value for the input parameter that is used when no explicit value is provided programmatically.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="classname" type="xs:string" fixed="org.xmlmath.operands.InputStringImpl"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	
	<xs:element name="inputBoolean" type="inputBoolean-type" substitutionGroup="inputValue"/>
	<xs:complexType name="inputBoolean-type">
		<xs:complexContent>
			<xs:extension base="inputValue-type">
				<xs:attribute name="value" type="xs:boolean" use="optional">
					<xs:annotation>
						<xs:documentation xml:lang="en">Provides a default value for the input parameter that is used when no explicit value is provided programmatically.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="classname" type="xs:string" fixed="org.xmlmath.operands.InputBooleanImpl"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	
	<xs:element name="inputNumber" type="inputNumber-type" substitutionGroup="inputValue" abstract="true"/>
	<xs:complexType name="inputNumber-type" abstract="true">
		<xs:complexContent>
			<xs:extension base="inputValue-type">
				<xs:sequence/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	
	<xs:element name="inputLong" type="inputLong-type" substitutionGroup="inputNumber"/>
	<xs:complexType name="inputLong-type">
		<xs:complexContent>
			<xs:extension base="inputNumber-type">
				<xs:attribute name="value" type="xs:long" use="optional">
					<xs:annotation>
						<xs:documentation xml:lang="en">Provides a default value for the input parameter that is used when no explicit value is provided programmatically.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="classname" type="xs:string" fixed="org.xmlmath.operands.InputLongImpl"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	
	<xs:element name="inputDouble" type="inputDouble-type" substitutionGroup="inputNumber"/>
	<xs:complexType name="inputDouble-type">
		<xs:complexContent>
			<xs:extension base="inputNumber-type">
				<xs:attribute name="value" type="xs:double" use="optional">
					<xs:annotation>
						<xs:documentation xml:lang="en">Provides a default value for the input parameter that is used when no explicit value is provided programmatically.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="classname" type="xs:string" fixed="org.xmlmath.operands.InputDoubleImpl"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	
	<xs:element name="inputList" type="inputList-type" substitutionGroup="inputValue"/>
	<xs:complexType name="inputList-type">
		<xs:complexContent>
			<xs:extension base="inputValue-type">
				<xs:attribute name="classname" type="xs:string" fixed="org.xmlmath.operands.InputListImpl"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	
	<xs:element name="includes" type="includes-type" final="#all">
		<xs:annotation>
			<xs:documentation xml:lang="en">This is the root tag for included documents. It can contain declarations and stanzas and can be used to include other external files.</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:complexType name="includes-type">
		<xs:sequence>
			<xs:group ref="definitions"/>
		</xs:sequence>
	</xs:complexType>
	
	<xs:element name="value" type="value-type" abstract="true"/>
	<xs:complexType name="value-type" abstract="true">
		<xs:annotation>
			<xs:documentation xml:lang="en"></xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:group ref="definitions" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	
	<xs:complexType name="declare-type" final="#all">
		<xs:annotation>
			<xs:documentation xml:lang="en">Declarations are used to give a particular sub-expression a name so that it can be referenced from elements deeper in the expression tree. The expression inside a declaration is not evaluated at runtime, unless it is explicitly referenced by the link-tag. It is evaluated each time it is linked.</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:group ref="definitions"/>
			<xs:element ref="value"/>
		</xs:sequence>
		<xs:attribute name="const" type="constScope" default="none" use="optional">
			<xs:annotation>
				<xs:documentation xml:lang="en">Used to specify whether a decalaration's value is constant or not. Constant declarations evaluate their body only once, store the result and return this result each time they are linked to. Non-constant declarations evaluate their body each time they are linked to. The default is non-constant.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="name" type="declaredName" use="required"/>
	</xs:complexType>
	
	<xs:complexType name="stanza-type" final="#all">
		<xs:annotation>
			<xs:documentation xml:lang="en">Stanzas can be used at any position in the expression tree to describe a certain sub-expression. In contrast to declarations, stanzas are not evaluated at the same place as they were declared. Instead, stanzas are inlined when they are referred to using &lt;inline&gt;. This allows them to operation on variables that weren't yet declared when the stanza was defined. Stanzas can also be nested directly in the stanza-tag.</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:group ref="definitions"/>
			<xs:element ref="value"/>
		</xs:sequence>
		<xs:attribute name="name" type="declaredName" use="required"/>
	</xs:complexType>
	
 	<xs:element name="nil" type="nil-type" final="#all" substitutionGroup="value"/>
	<xs:complexType name="nil-type">
		<xs:annotation>
			<xs:documentation xml:lang="en">Useful when a value is not defined. For example when an external source is sampled that doesn't currently exist. Or an empty cell in a spreadsheet program.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="value-type">
				<xs:sequence/>
				<xs:attribute name="classname" type="xs:string" fixed="org.xmlmath.operands.Nil"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:element name="fail" type="fail-type" final="#all" substitutionGroup="value"/>
	<xs:complexType name="fail-type" final="#all">
		<xs:annotation>
			<xs:documentation xml:lang="en">Raises an EvaluationException, causing the evaluation to fail.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="value-type">
				<xs:sequence/>
				<xs:attribute name="message" type="xs:string" use="optional">
					<xs:annotation>
						<xs:documentation xml:lang="en">The detail message for this exception.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="classname" type="xs:string" fixed="org.xmlmath.operands.Fail"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	
	<xs:element name="inline" type="inline-type" substitutionGroup="value"/>
	<xs:complexType name="inline-type">
		<xs:annotation>
			<xs:documentation xml:lang="en">Counterpart of the &lt;stanza&gt; tag. Used to place a copy of a previously defined stanza at the current location in the expression tree.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="value-type">
				<xs:sequence/>
				<xs:attribute name="name" type="declaredName" use="required"/>
				<xs:attribute name="classname" type="xs:string" fixed="org.xmlmath.operands.Inline"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	
	<xs:element name="inlineBoolean" type="inlineBoolean-type" substitutionGroup="abstract-boolean"/>
	<xs:complexType name="inlineBoolean-type">
		<xs:complexContent>
			<xs:extension base="abstract-boolean-type">
				<xs:sequence/>
				<xs:attribute name="name" type="declaredName" use="required"/>
				<xs:attribute name="classname" type="xs:string" fixed="org.xmlmath.operands.InlineBoolean"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	
	<xs:element name="inlineNumber" type="inlineNumber-type" substitutionGroup="number"/>
	<xs:complexType name="inlineNumber-type">
		<xs:complexContent>
			<xs:extension base="number-type">
				<xs:sequence/>
				<xs:attribute name="name" type="declaredName" use="required"/>
				<xs:attribute name="classname" type="xs:string" fixed="org.xmlmath.operands.InlineNumber"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	
	<xs:element name="inlineLong" type="inlineLong-type" substitutionGroup="abstract-long"/>
	<xs:complexType name="inlineLong-type">
		<xs:complexContent>
			<xs:extension base="abstract-long-type">
				<xs:sequence/>
				<xs:attribute name="name" type="declaredName" use="required"/>
				<xs:attribute name="classname" type="xs:string" fixed="org.xmlmath.operands.InlineLong"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	
	<xs:element name="inlineDouble" type="inlineDouble-type" substitutionGroup="abstract-double"/>
	<xs:complexType name="inlineDouble-type">
		<xs:complexContent>
			<xs:extension base="abstract-double-type">
				<xs:sequence/>
				<xs:attribute name="name" type="declaredName" use="required"/>
				<xs:attribute name="classname" type="xs:string" fixed="org.xmlmath.operands.InlineDouble"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	
	<xs:element name="inlineString" type="inlineString-type" substitutionGroup="abstract-string"/>
	<xs:complexType name="inlineString-type">
		<xs:complexContent>
			<xs:extension base="abstract-string-type">
				<xs:sequence/>
				<xs:attribute name="name" type="declaredName" use="required"/>
				<xs:attribute name="classname" type="xs:string" fixed="org.xmlmath.operands.InlineString"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	
	<xs:element name="inlineList" type="inlineList-type" substitutionGroup="abstract-list"/>
	<xs:complexType name="inlineList-type">
		<xs:complexContent>
			<xs:extension base="abstract-list-type">
				<xs:sequence/>
				<xs:attribute name="name" type="declaredName" use="required"/>
				<xs:attribute name="classname" type="xs:string" fixed="org.xmlmath.operands.InlineList"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	
	<xs:element name="link" type="link-type" substitutionGroup="value"/>
	<xs:complexType name="link-type">
		<xs:annotation>
			<xs:documentation xml:lang="en">Counterpart of the declare-tag. Used to return a previously declared sub-expression.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="value-type">
				<xs:sequence/>
				<xs:attribute name="name" type="declaredName" use="required"/>
				<xs:attribute name="classname" type="xs:string" fixed="org.xmlmath.operands.Link"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	
	<xs:element name="linkBoolean" type="linkBoolean-type" substitutionGroup="abstract-boolean"/>
	<xs:complexType name="linkBoolean-type">
		<xs:annotation>
			<xs:documentation xml:lang="en">Counterpart of the declare-tag. Used to return a previously declared sub-expression as a boolean. Will result in a ClassCastException at evaluation-time when the referred declaration is not of type boolean.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="abstract-boolean-type">
				<xs:sequence/>
				<xs:attribute name="name" type="declaredName" use="required"/>
				<xs:attribute name="classname" type="xs:string" fixed="org.xmlmath.operands.LinkBoolean"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	
	<xs:element name="linkNumber" type="linkNumber-type" substitutionGroup="number"/>
	<xs:complexType name="linkNumber-type">
		<xs:annotation>
			<xs:documentation xml:lang="en">Counterpart of the declare-tag. Used to return a previously declared sub-expression as a number. Will result in a ClassCastException at evaluation-time when the referred declaration is not of type number.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="number-type">
				<xs:sequence/>
				<xs:attribute name="name" type="declaredName" use="required"/>
				<xs:attribute name="classname" type="xs:string" fixed="org.xmlmath.operands.LinkNumber"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	
	<xs:element name="linkLong" type="linkLong-type" substitutionGroup="abstract-long"/>
	<xs:complexType name="linkLong-type">
		<xs:annotation>
			<xs:documentation xml:lang="en">Counterpart of the declare-tag. Used to return a previously declared sub-expression as a long. Will result in a ClassCastException at evaluation-time when the referred declaration is not of type long.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="abstract-long-type">
				<xs:sequence/>
				<xs:attribute name="name" type="declaredName" use="required"/>
				<xs:attribute name="classname" type="xs:string" fixed="org.xmlmath.operands.LinkLong"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	
	<xs:element name="linkDouble" type="linkDouble-type" substitutionGroup="abstract-double"/>
	<xs:complexType name="linkDouble-type">
		<xs:annotation>
			<xs:documentation xml:lang="en">Counterpart of the declare-tag. Used to return a previously declared sub-expression as a long. Will result in a ClassCastException at evaluation-time when the referred declaration is not of type double.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="abstract-double-type">
				<xs:sequence/>
				<xs:attribute name="name" type="declaredName" use="required"/>
				<xs:attribute name="classname" type="xs:string" fixed="org.xmlmath.operands.LinkDouble"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	
	<xs:element name="linkString" type="linkString-type" substitutionGroup="abstract-string"/>
	<xs:complexType name="linkString-type">
		<xs:annotation>
			<xs:documentation xml:lang="en">Counterpart of the declare-tag. Used to return a previously declared sub-expression as a long. Will result in a ClassCastException at evaluation-time when the referred declaration is not of type string.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="abstract-string-type">
				<xs:sequence/>
				<xs:attribute name="name" type="declaredName" use="required"/>
				<xs:attribute name="classname" type="xs:string" fixed="org.xmlmath.operands.LinkString"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	
	<xs:element name="linkList" type="linkList-type" substitutionGroup="abstract-list"/>
	<xs:complexType name="linkList-type">
		<xs:annotation>
			<xs:documentation xml:lang="en">Counterpart of the declare-tag. Used to return a previously declared sub-expression as a long. Will result in a ClassCastException at evaluation-time when the referred declaration is not of type list.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="abstract-list-type">
				<xs:sequence/>
				<xs:attribute name="name" type="declaredName" use="required"/>
				<xs:attribute name="classname" type="xs:string" fixed="org.xmlmath.operands.LinkList"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	
 	<xs:element name="isNil" type="isNil-type" substitutionGroup="abstract-boolean"/>
	<xs:complexType name="isNil-type">
		<xs:annotation>
			<xs:documentation xml:lang="en">Tests if the argument is nil.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="abstract-boolean-type">
				<xs:sequence>
					<xs:element ref="value"/>
				</xs:sequence>
				<xs:attribute name="classname" type="xs:string" fixed="org.xmlmath.operands.IsNil"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	
	<xs:element name="abstract-boolean" type="abstract-boolean-type" abstract="true" substitutionGroup="value"/>
	<xs:complexType name="abstract-boolean-type" abstract="true">
		<xs:annotation>
			<xs:documentation xml:lang="en"></xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="value-type">
				<xs:sequence/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	
 	<xs:element name="true" type="true-type" substitutionGroup="abstract-boolean" final="#all"/>
	<xs:complexType name="true-type" final="#all">
		<xs:annotation>
			<xs:documentation xml:lang="en"></xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="abstract-boolean-type">
				<xs:sequence/>
				<xs:attribute name="classname" type="xs:string" fixed="org.xmlmath.operands.True"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	
 	<xs:element name="false" type="false-type" substitutionGroup="abstract-boolean"/>
	<xs:complexType name="false-type">
		<xs:annotation>
			<xs:documentation xml:lang="en"></xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="abstract-boolean-type">
				<xs:sequence/>
				<xs:attribute name="classname" type="xs:string" fixed="org.xmlmath.operands.False"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:element name="and" type="and-type" substitutionGroup="abstract-boolean"/>
	<xs:complexType name="and-type">
		<xs:annotation>
			<xs:documentation xml:lang="en">Returns true if all operands evaluate to true, false otherwise.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="abstract-boolean-type">
				<xs:sequence>
					<xs:element ref="abstract-boolean" minOccurs="2" maxOccurs="unbounded"/>
				</xs:sequence>
				<xs:attribute name="classname" type="xs:string" fixed="org.xmlmath.operands.And"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	
	<xs:element name="equals" type="equals-type" substitutionGroup="abstract-boolean"/>
	<xs:complexType name="equals-type">
		<xs:annotation>
			<xs:documentation xml:lang="en">Compares two operands of any type.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="abstract-boolean-type">
				<xs:sequence>
					<xs:element ref="value"/>
					<xs:element ref="value"/>
				</xs:sequence>
				<xs:attribute name="classname" type="xs:string" fixed="org.xmlmath.operands.Equals"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	
	<xs:element name="greaterThan" type="greaterThan-type" substitutionGroup="abstract-boolean"/>
	<xs:complexType name="greaterThan-type">
		<xs:annotation>
			<xs:documentation xml:lang="en"></xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="abstract-boolean-type">
				<xs:sequence>
					<xs:element ref="number"/>
					<xs:element ref="number"/>
				</xs:sequence>
				<xs:attribute name="inclusive" type="xs:boolean" use="optional" default="false"/>
				<xs:attribute name="classname" type="xs:string" fixed="org.xmlmath.operands.GreaterThan"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	
	<xs:element name="lessThan" type="lessThan-type" substitutionGroup="abstract-boolean"/>
	<xs:complexType name="lessThan-type">
		<xs:complexContent>
			<xs:extension base="abstract-boolean-type">
				<xs:sequence>
					<xs:element ref="number"/>
					<xs:element ref="number"/>
				</xs:sequence>
				<xs:attribute name="inclusive" type="xs:boolean" use="optional" default="false"/>
				<xs:attribute name="classname" type="xs:string" fixed="org.xmlmath.operands.LessThan"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	
	<xs:element name="not" type="not-type" substitutionGroup="abstract-boolean"/>
	<xs:complexType name="not-type">
		<xs:complexContent>
			<xs:extension base="abstract-boolean-type">
				<xs:sequence>
					<xs:element ref="abstract-boolean"/>
				</xs:sequence>
				<xs:attribute name="classname" type="xs:string" fixed="org.xmlmath.operands.Not"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	
	<xs:element name="or" type="or-type" substitutionGroup="abstract-boolean"/>
	<xs:complexType name="or-type">
		<xs:annotation>
			<xs:documentation xml:lang="en">Returns true if at least one of its operands evaluate to true, false otherwise.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="abstract-boolean-type">
				<xs:sequence>
					<xs:element ref="abstract-boolean" minOccurs="2" maxOccurs="unbounded"/>
				</xs:sequence>
				<xs:attribute name="classname" type="xs:string" fixed="org.xmlmath.operands.Or"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	
	<xs:element name="xor" type="xor-type" substitutionGroup="abstract-boolean"/>
	<xs:complexType name="xor-type">
		<xs:annotation>
			<xs:documentation xml:lang="en">Performs an exclusive-or on two boolean operands.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="abstract-boolean-type">
				<xs:sequence>
					<xs:element ref="abstract-boolean"/>
					<xs:element ref="abstract-boolean"/>
				</xs:sequence>
				<xs:attribute name="classname" type="xs:string" fixed="org.xmlmath.operands.Xor"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	
	<xs:element name="isDistinct" type="isDistinct-type" substitutionGroup="abstract-boolean"/>
	<xs:complexType name="isDistinct-type">
		<xs:annotation>
			<xs:documentation xml:lang="en">Returns false if one or more list items are duplicates. True otherwise.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="abstract-boolean-type">
				<xs:sequence>
					<xs:element ref="abstract-list"/>
				</xs:sequence>
				<xs:attribute name="classname" type="xs:string" fixed="org.xmlmath.operands.IsDistinct"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:element name="abstract-list" type="abstract-list-type" abstract="true" substitutionGroup="value"/>
	<xs:complexType name="abstract-list-type" abstract="true">
		<xs:complexContent>
			<xs:extension base="value-type">
				<xs:sequence/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:element name="list" type="list-type" substitutionGroup="abstract-list"/>
	<xs:complexType name="list-type">
		<xs:complexContent>
			<xs:extension base="abstract-list-type">
				<xs:sequence>
					<xs:element ref="value" minOccurs="0" maxOccurs="unbounded"/>
				</xs:sequence>
				<xs:attribute name="classname" type="xs:string" fixed="org.xmlmath.operands.ListValue"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:element name="unique" type="unique-type" substitutionGroup="abstract-list"/>
	<xs:complexType name="unique-type">
		<xs:annotation>
			<xs:documentation xml:lang="en">Filters all duplicate items from the list and returns the result. The ordering is the same as in the original list.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="abstract-list-type">
				<xs:sequence>
					<xs:element ref="abstract-list"/>
				</xs:sequence>
				<xs:attribute name="classname" type="xs:string" fixed="org.xmlmath.operands.Unique"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:element name="sort" type="sort-type" substitutionGroup="abstract-list"/>
	<xs:complexType name="sort-type">
		<xs:annotation>
			<xs:documentation xml:lang="en">Sorts the given list according to the natural ordering of its elements. All elements in the list must be of the same type. The sorting algorithm is a modified mergesort (in which the merge is omitted if the highest element in the low sublist is less than the lowest element in the high sublist). This algorithm offers guaranteed n log(n) performance. This implementation dumps the specified list into an array, sorts the array, and iterates over the list resetting each element from the corresponding position in the array. This avoids the n^2 log(n) performance that would result from attempting to sort a linked list in place.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="abstract-list-type">
				<xs:sequence>
					<xs:element ref="abstract-list"/>
				</xs:sequence>
				<xs:attribute name="order" type="sortOrder" default="ascending" use="optional"/>
				<xs:attribute name="classname" type="xs:string" fixed="org.xmlmath.operands.Sort"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	
	<xs:element name="for" type="for-type" substitutionGroup="abstract-list"/>
	<xs:complexType name="for-type">
		<xs:complexContent>
			<xs:extension base="abstract-list-type">
				<xs:choice>
					<xs:sequence>
						<xs:element name="start" minOccurs="1" maxOccurs="1">
							<xs:complexType>
								<xs:sequence>
									<xs:element ref="abstract-long"/>
								</xs:sequence>
							</xs:complexType>
						</xs:element>
						<xs:element name="end" minOccurs="1" maxOccurs="1">
							<xs:complexType>
								<xs:sequence>
									<xs:element ref="abstract-long"/>
								</xs:sequence>
							</xs:complexType>
						</xs:element>
						<xs:element name="do" minOccurs="1" maxOccurs="1">
							<xs:complexType>
								<xs:sequence>
									<xs:element ref="value"/>
								</xs:sequence>
							</xs:complexType>
						</xs:element>
					</xs:sequence>
					<xs:sequence>
						<xs:element ref="abstract-long">
							<xs:annotation>
								<xs:documentation xml:lang="en">Specifies the "start" or "from" value. The for-loop starts at this number.</xs:documentation>
							</xs:annotation>
						</xs:element>
						<xs:element ref="abstract-long">
							<xs:annotation>
								<xs:documentation xml:lang="en">Specifies the "end" or "until" value. The for-loop runs until the incrementing iterator reaches this value. Hence, this value is exclusive, similar to for-loops in most programming languages.</xs:documentation>
							</xs:annotation>
						</xs:element>
						<xs:element ref="value">
							<xs:annotation>
								<xs:documentation xml:lang="en">This is the expression that is evaluated multiple time in the for-loop. Each result is added to a list. This list is eventually returned to the parent operator when the loop finishes.</xs:documentation>
							</xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:choice>
				
				<xs:attribute name="iterator" type="declaredName" use="required"/>
				<xs:attribute name="classname" type="xs:string" fixed="org.xmlmath.operands.For"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	
	<xs:element name="sum" type="sum-type" substitutionGroup="number"/>
	<xs:complexType name="sum-type">
		<xs:annotation>
			<xs:documentation xml:lang="en">Evaluates its operand in a loop, starting at "start", up to and including "end" and computes the sum of all results. This operation represents the capital sigma. The iterator is automatically declared as a long variable which can be referenced from within the sum's expression.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="number-type">
				<xs:choice>
					<xs:sequence>
						<xs:element name="start" minOccurs="1" maxOccurs="1">
							<xs:complexType>
								<xs:sequence>
									<xs:element ref="abstract-long"/>
								</xs:sequence>
							</xs:complexType>
						</xs:element>
						<xs:element name="end" minOccurs="1" maxOccurs="1">
							<xs:complexType>
								<xs:sequence>
									<xs:element ref="abstract-long"/>
								</xs:sequence>
							</xs:complexType>
						</xs:element>
						<xs:element name="do" minOccurs="1" maxOccurs="1">
							<xs:complexType>
								<xs:sequence>
									<xs:element ref="number"/>
								</xs:sequence>
							</xs:complexType>
						</xs:element>
					</xs:sequence>
					<xs:sequence>
						<xs:element ref="abstract-long">
							<xs:annotation>
								<xs:documentation xml:lang="en">Specifies the "start" value. The sum-loop starts at this number.</xs:documentation>
							</xs:annotation>
						</xs:element>
						<xs:element ref="abstract-long">
							<xs:annotation>
								 <xs:documentation xml:lang="en">This is the last and highest value that is used in the sum operation. There is an important difference between this attribute and the "end" attribute of the "for" operation. The latter treats the attribute as "exclusive", while the sum operator treats it as "inclusive".</xs:documentation>
							</xs:annotation>
						</xs:element>
						<xs:element ref="number"/>
					</xs:sequence>
				</xs:choice>
				<xs:attribute name="iterator" type="declaredName" use="required"/>
				<xs:attribute name="datatype" type="numberType" default="double" use="optional">
					<xs:annotation>
						<xs:documentation xml:lang="en">Used to specify whether the expression must be interpreted as longs or doubles. Defaults to double when omitted.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="classname" type="xs:string" fixed="org.xmlmath.operands.Sum"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	
	<xs:element name="number" type="number-type" abstract="true" substitutionGroup="value"/>
	<xs:complexType name="number-type" abstract="true">
		<xs:complexContent>
			<xs:extension base="value-type">
				<xs:sequence/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	
	<xs:element name="listProduct" type="listProduct-type" substitutionGroup="number"/>
	<xs:complexType name="listProduct-type">
		<xs:annotation>
			<xs:documentation xml:lang="en">Computes the product of all numbers in the given list. On an empty list null is returned, which may cause NullPointerExceptions further up the expression.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="number-type">
				<xs:sequence>
					<xs:element ref="abstract-list"/>
				</xs:sequence>
				<xs:attribute name="datatype" type="numberType" default="double" use="optional">
					<xs:annotation>
						<xs:documentation xml:lang="en">Used to specify whether the list's elements must be interpreted as integers or doubles. Defaults to double when omitted.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="classname" type="xs:string" fixed="org.xmlmath.operands.ListProduct"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	
	<xs:element name="listSum" type="listSum-type" substitutionGroup="number"/>
	<xs:complexType name="listSum-type">
		<xs:complexContent>
			<xs:extension base="number-type">
				<xs:sequence>
					<xs:element ref="abstract-list"/>
				</xs:sequence>
				<xs:attribute name="datatype" type="numberType" default="double" use="optional">
					<xs:annotation>
						<xs:documentation xml:lang="en">Used to specify whether the list's elements must be interpreted as integers or doubles. Defaults to double when omitted.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="classname" type="xs:string" fixed="org.xmlmath.operands.ListSum"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	
	<xs:element name="listItem" type="listItem-type" substitutionGroup="value"/>
	<xs:complexType name="listItem-type">
		<xs:annotation>
			<xs:documentation xml:lang="en">This operator selects the item at a specific index in a list. When an index smaller than 0 or larger than the list-size is specified, an EvaluationException is thrown.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="value-type">
				<xs:sequence>
					<xs:element ref="abstract-list" minOccurs="1" maxOccurs="1">
						<xs:annotation>
							<xs:documentation xml:lang="en">The list from which the item is to be selected. Note that the list may be heterogeneous in nature and contain nil elements.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element ref="abstract-long" minOccurs="1" maxOccurs="1">
						<xs:annotation>
							<xs:documentation xml:lang="en">Index of the element to return.</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
				<xs:attribute name="classname" type="xs:string" fixed="org.xmlmath.operands.ListItem"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	
	<xs:element name="listSize" type="listSize-type" substitutionGroup="abstract-long"/>
	<xs:complexType name="listSize-type">
		<xs:annotation>
			<xs:documentation xml:lang="en">Counts the number of elements in a list.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="abstract-long-type">
				<xs:sequence>
					<xs:element ref="abstract-list"/>
				</xs:sequence>
				<xs:attribute name="classname" type="xs:string" fixed="org.xmlmath.operands.ListSize"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	
	<xs:element name="rnd" type="rnd-type" substitutionGroup="abstract-double"/>
	<xs:complexType name="rnd-type">
		<xs:annotation>
			<xs:documentation xml:lang="en">An instance of this operator is used to generate a stream of pseudorandom numbers. The operator uses a 48-bit seed, which is modified using a linear congruential formula. (See Donald Knuth, The Art of Computer Programming, Volume 2, Section 3.2.1.)  If two instances of this operator are created with the same seed, and the same sequence of evaluations is made for each, they will generate and return identical sequences of numbers.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="abstract-double-type">
				<xs:sequence>
				</xs:sequence>
				<xs:attribute name="distribution" type="distribution-type" default="uniform" use="optional">
					<xs:annotation>
						<xs:documentation xml:lang="en">Specifies the distribution of random numbers generated by this operator. If "uniform" is specified (which is also the default value), it returns the next pseudorandom, uniformly distributed double value between 0.0 and 1.0. When "normal" is specified, it returns the next pseudorandom, Gaussian ("normally") distributed double value with mean 0.0 and standard deviation 1.0.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="seed" type="xs:long" use="optional"/>
				<xs:attribute name="classname" type="xs:string" fixed="org.xmlmath.operands.Random"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	
	<xs:element name="castBoolean" type="castBoolean-type" substitutionGroup="abstract-boolean"/>
	<xs:complexType name="castBoolean-type">
		<xs:annotation>
			<xs:documentation xml:lang="en">Use this operator to cast any value to type boolean. The given value must be a subtype of abstract-boolean, or a TypeCastException will be thrown at runtime.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="abstract-boolean-type">
				<xs:sequence>
					<xs:element ref="value" maxOccurs="1" minOccurs="1"/>
				</xs:sequence>
				<xs:attribute name="classname" type="xs:string" fixed="org.xmlmath.operands.CastBoolean"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	
	<xs:element name="castNumber" type="castNumber-type" substitutionGroup="number"/>
	<xs:complexType name="castNumber-type">
		<xs:annotation>
			<xs:documentation xml:lang="en">Use this operator to cast any value to type number. The given value must be a subtype of abstract-number, or a TypeCastException will be thrown at runtime.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="number-type">
				<xs:sequence>
					<xs:element ref="value" maxOccurs="1" minOccurs="1"/>
				</xs:sequence>
				<xs:attribute name="classname" type="xs:string" fixed="org.xmlmath.operands.CastNumber"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	
	<xs:element name="castLong" type="castLong-type" substitutionGroup="abstract-long"/>
	<xs:complexType name="castLong-type">
		<xs:annotation>
			<xs:documentation xml:lang="en">Use this operator to cast any value to type long. The given value must be a subtype of abstract-long, or a TypeCastException will be thrown at runtime.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="abstract-long-type">
				<xs:sequence>
					<xs:element ref="value" maxOccurs="1" minOccurs="1"/>
				</xs:sequence>
				<xs:attribute name="classname" type="xs:string" fixed="org.xmlmath.operands.CastLong"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	
	<xs:element name="castDouble" type="castDouble-type" substitutionGroup="abstract-double"/>
	<xs:complexType name="castDouble-type">
		<xs:annotation>
			<xs:documentation xml:lang="en">Use this operator to cast any value to type double. The given value must be a subtype of abstract-double, or a TypeCastException will be thrown at runtime.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="abstract-double-type">
				<xs:sequence>
					<xs:element ref="value" maxOccurs="1" minOccurs="1"/>
				</xs:sequence>
				<xs:attribute name="classname" type="xs:string" fixed="org.xmlmath.operands.CastDouble"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	
	<xs:element name="castString" type="castString-type" substitutionGroup="abstract-string"/>
	<xs:complexType name="castString-type">
		<xs:annotation>
			<xs:documentation xml:lang="en">Use this operator to cast any value to type string. The given value must be a subtype of abstract-string, or a TypeCastException will be thrown at runtime. This operator differs from the toString-operator in that the latter converts any given value to a string-representation, while this operator merely casts a value to type string.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="abstract-string-type">
				<xs:sequence>
					<xs:element ref="value" maxOccurs="1" minOccurs="1"/>
				</xs:sequence>
				<xs:attribute name="classname" type="xs:string" fixed="org.xmlmath.operands.CastString"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	
	<xs:element name="castList" type="castList-type" substitutionGroup="abstract-list"/>
	<xs:complexType name="castList-type">
		<xs:annotation>
			<xs:documentation xml:lang="en">Use this operator to cast any value to type list. The given value must be a subtype of abstract-list, or a TypeCastException will be thrown at runtime.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="abstract-list-type">
				<xs:sequence>
					<xs:element ref="value" maxOccurs="1" minOccurs="1"/>
				</xs:sequence>
				<xs:attribute name="classname" type="xs:string" fixed="org.xmlmath.operands.CastList"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	
	<xs:element name="choose" type="choose-type" substitutionGroup="value"/>
	<xs:complexType name="choose-type">
		<xs:annotation>
			<xs:documentation xml:lang="en">This tag allows conditional execution. It consists of three parts: the condition and two expression. If the boolean expression in the if-tag evaluates to true, the expression in the then-tag is evaluated, if it evaluates to false, the expression in the else-tag is evaluated. Note that the else-tag is required. Usage of the if/then/else tags is optional and are used mainly to clearly identify the condition and the two sub-expressions.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="value-type">
				<xs:choice>
					<xs:sequence>
						<xs:element name="if" minOccurs="1" maxOccurs="1">
							<xs:complexType>
								<xs:sequence>
									<xs:element ref="abstract-boolean" minOccurs="1" maxOccurs="1"/>
								</xs:sequence>
							</xs:complexType>
						</xs:element>
						<xs:element name="then" minOccurs="1" maxOccurs="1">
							<xs:complexType>
								<xs:sequence>
									<xs:element ref="value" minOccurs="1" maxOccurs="1"/>
								</xs:sequence>
							</xs:complexType>
						</xs:element>
						<xs:element name="else" minOccurs="1" maxOccurs="1">
							<xs:complexType>
								<xs:sequence>
									<xs:element ref="value" minOccurs="1" maxOccurs="1"/>
								</xs:sequence>
							</xs:complexType>
						</xs:element>
					</xs:sequence>
					<xs:sequence>
						<xs:element ref="abstract-boolean" minOccurs="1" maxOccurs="1"/>
						<xs:element ref="value" minOccurs="1" maxOccurs="1"/>
						<xs:element ref="value" minOccurs="1" maxOccurs="1"/>
					</xs:sequence>
				</xs:choice>
				<xs:attribute name="classname" type="xs:string" fixed="org.xmlmath.operands.Choose"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	
	<xs:element name="add" type="add-type" substitutionGroup="number"/>
	<xs:complexType name="add-type">
		<xs:annotation>
			<xs:documentation xml:lang="en">Computes the sum of two or more numbers.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="number-type">
				<xs:sequence>
					<xs:element ref="number" minOccurs="2" maxOccurs="unbounded"/>
				</xs:sequence>
				<xs:attribute name="datatype" type="numberType" default="double" use="optional">
					<xs:annotation>
						<xs:documentation xml:lang="en">Used to specify whether the operands must be interpreted as integers or doubles. Defaults to double when omitted.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="classname" type="xs:string" fixed="org.xmlmath.operands.Add"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	
	<xs:element name="subtract" type="subtract-type" substitutionGroup="number"/>
	<xs:complexType name="subtract-type">
		<xs:annotation>
			<xs:documentation xml:lang="en">Computes the difference between two numbers.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="number-type">
				<xs:sequence>
					<xs:element ref="number"/>
					<xs:element ref="number"/>
				</xs:sequence>
				<xs:attribute name="datatype" type="numberType" default="double" use="optional">
					<xs:annotation>
						<xs:documentation xml:lang="en">Used to specify whether the operands must be interpreted as integers or doubles. Defaults to double when omitted.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="classname" type="xs:string" fixed="org.xmlmath.operands.Subtract"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	
	<xs:element name="product" type="product-type" substitutionGroup="number"/>
	<xs:complexType name="product-type">
		<xs:annotation>
			<xs:documentation xml:lang="en">Computes the product of two numbers.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="number-type">
				<xs:sequence>
					<xs:element ref="number" minOccurs="2" maxOccurs="unbounded"/>
				</xs:sequence>
				<xs:attribute name="datatype" type="numberType" default="double" use="optional">
					<xs:annotation>
						<xs:documentation xml:lang="en">Used to specify whether the operands must be interpreted as integers or doubles. Defaults to double when omitted.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="classname" type="xs:string" fixed="org.xmlmath.operands.Product"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	
	<xs:element name="pow" type="pow-type" substitutionGroup="abstract-double"/>
	<xs:complexType name="pow-type">
		<xs:annotation>
			<xs:documentation xml:lang="en">Computes the value of the first argument raised to the power of the second argument.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="abstract-double-type">
				<xs:sequence>
					<xs:element ref="abstract-double"/>
					<xs:element ref="abstract-double"/>
				</xs:sequence>
				<xs:attribute name="classname" type="xs:string" fixed="org.xmlmath.operands.Power"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	
	<xs:element name="sqrt" type="sqrt-type" substitutionGroup="abstract-double"/>
	<xs:complexType name="sqrt-type">
		<xs:annotation>
			<xs:documentation xml:lang="en">Computes the correctly rounded positive square root of a double value.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="abstract-double-type">
				<xs:sequence>
					<xs:element ref="abstract-double"/>
				</xs:sequence>
				<xs:attribute name="classname" type="xs:string" fixed="org.xmlmath.operands.Sqrt"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	
	<xs:element name="sin" type="sin-type" substitutionGroup="abstract-double"/>
	<xs:complexType name="sin-type">
		<xs:annotation>
			<xs:documentation xml:lang="en">Computes the trigonometric sine of an angle.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="abstract-double-type">
				<xs:sequence>
					<xs:element ref="abstract-double"/>
				</xs:sequence>
				<xs:attribute name="classname" type="xs:string" fixed="org.xmlmath.operands.Sin"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	
	<xs:element name="log" type="log-type" substitutionGroup="abstract-double"/>
	<xs:complexType name="log-type">
		<xs:annotation>
			<xs:documentation xml:lang="en">Computes the natural logarithm (base e) of a double  value. If the argument is positive infinity, then the result is positive infinity. If the argument is positive zero or negative zero, then the result is negative infinity.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="abstract-double-type">
				<xs:sequence>
					<xs:element ref="abstract-double"/>
				</xs:sequence>
				<xs:attribute name="classname" type="xs:string" fixed="org.xmlmath.operands.Log"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	
	<xs:element name="log10" type="log10-type" substitutionGroup="abstract-double"/>
	<xs:complexType name="log10-type">
		<xs:annotation>
			<xs:documentation xml:lang="en">Computes the common logarithm (base 10) of a double  value. If the argument is positive infinity, then the result is positive infinity. If the argument is positive zero or negative zero, then the result is negative infinity. If the argument is equal to 10^n for integer n, then the result is n.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="abstract-double-type">
				<xs:sequence>
					<xs:element ref="abstract-double"/>
				</xs:sequence>
				<xs:attribute name="classname" type="xs:string" fixed="org.xmlmath.operands.Log10"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	
	<xs:element name="cos" type="cos-type" substitutionGroup="abstract-double"/>
	<xs:complexType name="cos-type">
		<xs:annotation>
			<xs:documentation xml:lang="en">Computes the trigonometric cosine of an angle.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="abstract-double-type">
				<xs:sequence>
					<xs:element ref="abstract-double"/>
				</xs:sequence>
				<xs:attribute name="classname" type="xs:string" fixed="org.xmlmath.operands.Cos"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	
	<xs:element name="tan" type="tan-type" substitutionGroup="abstract-double"/>
	<xs:complexType name="tan-type">
		<xs:annotation>
			<xs:documentation xml:lang="en">Computes the trigonometric tangent of an angle.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="abstract-double-type">
				<xs:sequence>
					<xs:element ref="abstract-double"/>
				</xs:sequence>
				<xs:attribute name="classname" type="xs:string" fixed="org.xmlmath.operands.Tan"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	
	<xs:element name="quotient" type="quotient-type" substitutionGroup="number"/>
	<xs:complexType name="quotient-type">
		<xs:annotation>
			<xs:documentation xml:lang="en">Computes the quotient of two numbers. Throws a DivideByZeroException when an integer division by zero is attempted.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="number-type">
				<xs:sequence>
					<xs:element ref="number"/>
					<xs:element ref="number"/>
				</xs:sequence>
				<xs:attribute name="datatype" type="numberType" default="double" use="optional">
					<xs:annotation>
						<xs:documentation xml:lang="en">Used to specify whether the operands must be interpreted as integers or doubles. Defaults to double when omitted.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="classname" type="xs:string" fixed="org.xmlmath.operands.Quotient"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:element name="abstract-double" type="abstract-double-type" abstract="true" substitutionGroup="number"/>
	<xs:complexType name="abstract-double-type" abstract="true">
		<xs:annotation>
			<xs:documentation xml:lang="en">Base type for double-precision 64-bit IEEE 754 floating point numbers.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="number-type">
				<xs:sequence/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	
	<xs:element name="double" type="double-type" substitutionGroup="abstract-double"/>
	<xs:complexType name="double-type">
		<xs:complexContent>
			<xs:extension base="abstract-double-type">
				<xs:sequence/>
				<xs:attribute name="value" type="xs:double" use="required"/>
				<xs:attribute name="classname" type="xs:string" fixed="org.xmlmath.operands.DoubleValue"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	
	<xs:element name="pi" type="pi-type" substitutionGroup="abstract-double" final="#all"/>
	<xs:complexType name="pi-type" final="#all">
		<xs:annotation>
			<xs:documentation xml:lang="en">The double value that is closer than any other to pi, the ratio of the circumference of a circle to its diameter.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="abstract-double-type">
				<xs:sequence/>
				<xs:attribute name="classname" type="xs:string" fixed="org.xmlmath.operands.Pi"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	
	<xs:element name="e" type="e-type" substitutionGroup="abstract-double" final="#all"/>
	<xs:complexType name="e-type" final="#all">
		<xs:annotation>
			<xs:documentation xml:lang="en">The double value that is closer than any other to e, the base of the natural logarithms.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="abstract-double-type">
				<xs:sequence/>
				<xs:attribute name="classname" type="xs:string" fixed="org.xmlmath.operands.E"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	
	<xs:element name="infinity" type="infinity-type" substitutionGroup="abstract-double" final="#all"/>
	<xs:complexType name="infinity-type" final="#all">
		<xs:annotation>
			<xs:documentation xml:lang="en">A constant holding the positive infinity of type double.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="abstract-double-type">
				<xs:sequence/>
				<xs:attribute name="classname" type="xs:string" fixed="org.xmlmath.operands.Infinity"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	
	<xs:element name="toDouble" type="toDouble-type" substitutionGroup="abstract-double"/>
	<xs:complexType name="toDouble-type">
		<xs:annotation>
			<xs:documentation xml:lang="en">Converts any number to a double value.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="abstract-double-type">
				<xs:sequence>
					<xs:element ref="number"/>
				</xs:sequence>
				<xs:attribute name="classname" type="xs:string" fixed="org.xmlmath.operands.ToDouble"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:element name="abstract-long" type="abstract-long-type" abstract="true" substitutionGroup="number"/>
	<xs:complexType name="abstract-long-type" abstract="true">
		<xs:annotation>
			<xs:documentation xml:lang="en">Base type for 64-bit signed two's-complement integer values.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="number-type">
				<xs:sequence/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	
	<xs:element name="long" type="long-type" substitutionGroup="abstract-long"/>
	<xs:complexType name="long-type">
		<xs:complexContent>
			<xs:extension base="abstract-long-type">
				<xs:sequence/>
				<xs:attribute name="value" type="xs:long" use="required"/>
				<xs:attribute name="classname" type="xs:string" fixed="org.xmlmath.operands.LongValue"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	
	<xs:element name="longRef" type="longRef-type" substitutionGroup="abstract-long"/>
	<xs:complexType name="longRef-type">
		<xs:annotation>
			<xs:documentation xml:lang="en">Returns the value of the declared long variable whose name attribute matches this name.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="abstract-long-type">
				<xs:sequence/>
				<xs:attribute name="name" type="xs:string" use="required"/>
				<xs:attribute name="classname" type="xs:string" fixed="org.xmlmath.operands.LongRef"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	
	<xs:element name="toLong" type="toLong-type" substitutionGroup="abstract-long"/>
	<xs:complexType name="toLong-type">
		<xs:annotation>
			<xs:documentation xml:lang="en">Used to convert (truncate) any number to an long.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="abstract-long-type">
				<xs:sequence>
					<xs:element ref="number"/>
				</xs:sequence>
				<xs:attribute name="classname" type="xs:string" fixed="org.xmlmath.operands.ToLong"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	
	<xs:element name="round" type="round-type" substitutionGroup="abstract-long"/>
	<xs:complexType name="round-type">
		<xs:annotation>
			<xs:documentation xml:lang="en">Returns the closest long to the argument. The result is rounded to an long by adding 1/2, taking the floor of the result, and casting the result to type long.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="abstract-long-type">
				<xs:sequence>
					<xs:element ref="number"/>
				</xs:sequence>
				<xs:attribute name="classname" type="xs:string" fixed="org.xmlmath.operands.Round"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	
	<xs:element name="fact" type="fact-type" substitutionGroup="abstract-long"/>
	<xs:complexType name="fact-type">
		<xs:annotation>
			<xs:documentation xml:lang="en">Computes the factorial of an long. Note that xmlmath uses 64-bit, signed integers, making 2^63 - 1 the biggest achievable number. This is not large enough to hold the result of factorials larger than 20!</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="abstract-long-type">
				<xs:sequence>
					<xs:element ref="abstract-long"/>
				</xs:sequence>
				<xs:attribute name="classname" type="xs:string" fixed="org.xmlmath.operands.Factorial"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	
	<xs:element name="mod" type="mod-type" substitutionGroup="abstract-long"/>
	<xs:complexType name="mod-type">
		<xs:annotation>
			<xs:documentation xml:lang="en">Computes long % denominator, where the denominator is the second operand.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="abstract-long-type">
				<xs:sequence>
					<xs:element ref="abstract-long"/>
					<xs:element ref="abstract-long"/>
				</xs:sequence>
				<xs:attribute name="classname" type="xs:string" fixed="org.xmlmath.operands.Mod"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	
	<xs:element name="abs" type="abs-type" substitutionGroup="number"/>
	<xs:complexType name="abs-type">
		<xs:annotation>
			<xs:documentation xml:lang="en">Computes absolute value of a number.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="number-type">
				<xs:sequence>
					<xs:element ref="number"/>
				</xs:sequence>
				<xs:attribute name="datatype" type="numberType" default="double" use="optional">
					<xs:annotation>
						<xs:documentation xml:lang="en">Used to specify whether the operand must be interpreted as long or double. Defaults to double when omitted.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="classname" type="xs:string" fixed="org.xmlmath.operands.Absolute"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	
	<xs:element name="count" type="count-type" substitutionGroup="abstract-long"/>
	<xs:complexType name="count-type">
		<xs:annotation>
			<xs:documentation xml:lang="en">Counts the size of a list.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="abstract-long-type">
				<xs:sequence>
					<xs:element ref="abstract-list"/>
				</xs:sequence>
				<xs:attribute name="classname" type="xs:string" fixed="org.xmlmath.operands.Count"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	
	<xs:element name="abstract-string" type="abstract-string-type" substitutionGroup="value" abstract="true"/>
	<xs:complexType name="abstract-string-type" abstract="true">
		<xs:complexContent>
			<xs:extension base="value-type">
				<xs:sequence/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	
	<xs:element name="string" type="string-type" substitutionGroup="abstract-string"/>
	<xs:complexType name="string-type">
		<xs:complexContent>
			<xs:extension base="abstract-string-type">
				<xs:sequence/>
				<xs:attribute name="value" type="xs:string" use="required"/>
				<xs:attribute name="classname" type="xs:string" fixed="org.xmlmath.operands.StringValue"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	
	<xs:element name="stringRef" type="stringRef-type" substitutionGroup="abstract-string"/>
	<xs:complexType name="stringRef-type">
		<xs:complexContent>
			<xs:extension base="abstract-string-type">
				<xs:sequence/>
				<xs:attribute name="name" type="xs:string" use="required"/>
				<xs:attribute name="classname" type="xs:string" fixed="org.xmlmath.operands.StringRef"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	
	<xs:element name="strlen" type="strlen-type" substitutionGroup="abstract-long"/>
	<xs:complexType name="strlen-type">
		<xs:annotation>
			<xs:documentation xml:lang="en">Computes the length of a string.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="abstract-long-type">
				<xs:sequence>
					<xs:element ref="abstract-string"/>
				</xs:sequence>
				<xs:attribute name="classname" type="xs:string" fixed="org.xmlmath.operands.StringLength"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	
	<xs:element name="strcat" type="strcat-type" substitutionGroup="abstract-string"/>
	<xs:complexType name="strcat-type">
		<xs:annotation>
			<xs:documentation xml:lang="en">Concatenates two or more strings (starting with the first, then the second, etc).</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="abstract-string-type">
				<xs:sequence>
					<xs:choice>
						<xs:element ref="abstract-string" minOccurs="2" maxOccurs="unbounded"/>
						<xs:element ref="abstract-list"/>
					</xs:choice>
				</xs:sequence>
				<xs:attribute name="classname" type="xs:string" fixed="org.xmlmath.operands.StringCat"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	
	<xs:element name="toString" type="toString-type" substitutionGroup="abstract-string"/>
	<xs:complexType name="toString-type">
		<xs:annotation>
			<xs:documentation xml:lang="en">Returns a string representation of its operand. When the operand is a list, the string representation consists of a list of the operands elements in their original order, enclosed in square brackets ("[]"). Adjacent elements are separated by the characters ", " (comma and space). The list elements are converted to strings with this operation.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="abstract-string-type">
				<xs:sequence>
					<xs:element ref="value"/>
				</xs:sequence>
				<xs:attribute name="classname" type="xs:string" fixed="org.xmlmath.operands.ToString"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	
	<xs:element name="substr" type="substr-type" substitutionGroup="abstract-string"/>
	<xs:complexType name="substr-type">
		<xs:annotation>
			<xs:documentation xml:lang="en">Returns a new string that is a substring of this string. The substring begins at the specified beginIndex and extends to the character at index endIndex - 1. Thus the length of the substring is endIndex-beginIndex.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="abstract-string-type">
				<xs:sequence>
					<xs:element ref="abstract-string"/>
					<xs:element ref="abstract-long" minOccurs="1" maxOccurs="2">
						<xs:annotation>
							<xs:documentation xml:lang="en">First is the begin index, second the ending index. The ending index, exclusive, defaults to the end of the string when omitted.</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
				<xs:attribute name="classname" type="xs:string" fixed="org.xmlmath.operands.SubString"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	
	<xs:simpleType name="dataType">
		<xs:restriction base="xs:string">
			<xs:enumeration value="long"/>
			<xs:enumeration value="double"/>
			<xs:enumeration value="string"/>
			<xs:enumeration value="list"/>
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="numberType">
		<xs:annotation>
			<xs:documentation xml:lang="en">Enumeration used to identify either longs or doubles. This is used as attribute in operations sum and product to indicate a list's item types.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="dataType">
			<xs:enumeration value="long"/>
			<xs:enumeration value="double"/>
		</xs:restriction>
	</xs:simpleType>
	
	<xs:simpleType name="distribution-type">
		<xs:restriction base="xs:string">
			<xs:enumeration value="uniform"/>
			<xs:enumeration value="normal"/>
		</xs:restriction>
	</xs:simpleType>
	
	<xs:simpleType name="declaredName">
		<xs:annotation>
			<xs:documentation xml:lang="en">Used for variable names in declarations. Variable names are strings that consist purely of characters, digits and the underscore. The first character may not be a digit.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:pattern value="[A-Za-z_]+[A-Za-z\d_]*"/>
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="sortOrder">
		<xs:restriction base="xs:string">
			<xs:enumeration value="ascending"/>
			<xs:enumeration value="descending"/>
		</xs:restriction>
	</xs:simpleType>
	
	<xs:simpleType name="constScope">
		<xs:annotation>
			<xs:documentation xml:lang="en">Defines the scope of a const value.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:enumeration value="none"/>
			<xs:enumeration value="eval"/>
			<xs:enumeration value="expr"/>
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="include-type">
		<xs:restriction base="xs:anyURI">
		</xs:restriction>
	</xs:simpleType>
</xs:schema>
